name: reusable-docker-acr

on:
  workflow_call:
    inputs:
      context:
        description: Build context path relative to repository root.
        required: false
        default: "."
        type: string
      dockerfile:
        description: Dockerfile path relative to repository root.
        required: false
        default: Dockerfile
        type: string
      image_name:
        required: true
        type: string
      registry_name:
        required: true
        type: string
      semantic_version:
        required: false
        default: ""
        type: string
      push_image:
        description: Set true to push to ACR (typically on main merges).
        required: false
        default: false
        type: boolean
      vulnerability_threshold:
        description: Minimum vulnerability severity (comma separated) that should fail the build, for example HIGH,CRITICAL.
        required: false
        default: HIGH,CRITICAL
        type: string
    secrets:
      azure_credentials:
        description: Service principal JSON used by azure/login. Requires ACR push permissions.
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  build_and_push:
    name: Build, Scan, and Push
    runs-on: ubuntu-latest
    env:
      REGISTRY_LOGIN_SERVER: ${{ inputs.registry_name }}.azurecr.io
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}

      - name: Log into ACR
        run: az acr login --name ${{ inputs.registry_name }}
        if: inputs.push_image == true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: ${{ inputs.context }}
          scanners: vuln,secret,config
          vuln-type: os,library
          severity: ${{ inputs.vulnerability_threshold }}
          exit-code: 1
          ignore-unfixed: true
          timeout: 10m

      - name: Prepare Docker metadata tags
        id: prepare-metadata
        shell: bash
        run: |
          tags="$(cat <<'EOF'
          type=ref,event=branch
          type=ref,event=pr
          type=sha,format=long
          EOF
          )"
                    if [ -n "${{ inputs.semantic_version }}" ]; then
                      version="${{ inputs.semantic_version }}"
                      tags="${tags}
          type=semver,pattern={{version}},value=${version}
          type=semver,pattern={{major}},value=${version}
          type=semver,pattern={{major}}.{{minor}},value=${version}"
                    fi
                    {
                      echo 'tags<<EOF'
                      echo "${tags}"
                      echo 'EOF'
                    } >> "$GITHUB_OUTPUT"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ inputs.image_name }}
          tags: ${{ steps.prepare-metadata.outputs.tags }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
