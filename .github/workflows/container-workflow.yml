name: container-workflow

on:
  workflow_call:
    inputs:
      context:
        description: Build context path relative to repository root.
        required: false
        default: "."
        type: string
      dockerfile:
        description: Dockerfile path relative to repository root.
        required: true
        type: string
      image_name:
        required: true
        type: string
      registry_name:
        required: true
        type: string
      release_branch:
        description: Branch that triggers semantic-release and image push.
        required: false
        default: main
        type: string
      vulnerability_threshold:
        description: Minimum vulnerability severity (comma separated) that should fail the build, for example HIGH,CRITICAL.
        required: false
        default: HIGH,CRITICAL
        type: string
      environment_name:
        description: GitHub environment name used to gate container release.
        required: false
        default: Production
        type: string
    secrets:
      AZURE_CLIENT_ID:
        description: Azure AD application (service principal) client ID for registry authentication.
        required: true
      AZURE_TENANT_ID:
        description: Azure AD tenant ID that owns the service principal.
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: Azure subscription ID that contains the registry.
        required: true
      REPO_PAT:
        description: Personal Access Token for accessing the ArgoCD configuration repository.
        required: true
permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  build_and_push:
    name: Build and Release
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}
    outputs:
      release_version: ${{ steps.semantic.outputs.new_release_version }}
      release_published: ${{ steps.semantic.outputs.new_release_published }}
      image_digest: ${{ steps.build.outputs.digest }}
    env:
      REGISTRY_LOGIN_SERVER: ${{ inputs.registry_name }}.azurecr.io
      RELEASE_BRANCH_REF: refs/heads/${{ inputs.release_branch }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Validate PR title follows Conventional Commits
        if: github.event_name == 'pull_request'
        uses: amannn/action-semantic-pull-request@v5
        with:
          types: |
            build
            chore
            ci
            docs
            feat
            fix
            perf
            refactor
            revert
            style
            test
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare semantic-release config
        if: github.event_name != 'pull_request' && github.ref == env.RELEASE_BRANCH_REF
        run: |
          cat <<EOF > .releaserc.json
          {
            "branches": [
              "${RELEASE_BRANCH}"
            ],
            "plugins": [
              "@semantic-release/github"
            ]
          }
          EOF
        env:
          RELEASE_BRANCH: ${{ inputs.release_branch }}

      - name: Run semantic-release
        id: semantic
        if: github.event_name != 'pull_request' && github.ref == env.RELEASE_BRANCH_REF
        uses: cycjimmy/semantic-release-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}

      - name: Azure login
        if: github.event_name != 'pull_request' && github.ref == env.RELEASE_BRANCH_REF
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log into ACR
        if: github.event_name != 'pull_request' && github.ref == env.RELEASE_BRANCH_REF
        run: az acr login --name ${{ inputs.registry_name }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ inputs.image_name }}
          flavor: |
            latest=${{ github.event_name != 'pull_request' && github.ref == env.RELEASE_BRANCH_REF }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            ${{ steps.semantic.outputs.new_release_version && format('type=semver,pattern={{{{version}}}},value={0}', steps.semantic.outputs.new_release_version) }}
            ${{ steps.semantic.outputs.new_release_version && format('type=semver,pattern={{{{major}}}}.{{{{minor}}}},value={0}', steps.semantic.outputs.new_release_version) }}
            ${{ steps.semantic.outputs.new_release_version && format('type=semver,pattern={{{{major}}}},value={0}', steps.semantic.outputs.new_release_version) }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: ${{ github.event_name != 'pull_request' && github.ref == env.RELEASE_BRANCH_REF }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Security scan image with Trivy
        id: trivy_scan
        if: github.event_name == 'pull_request'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: ${{ steps.build.outputs.imageid }}
          vuln-type: os,library
          severity: ${{ inputs.vulnerability_threshold }}
          exit-code: 0
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
        continue-on-error: true

      - name: Upload scan results
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      - name: Generate scan summary
        id: trivy_summary
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          if [ ! -s trivy-results.sarif ]; then
            {
              echo "report<<EOF"
              echo "### Trivy Scan Summary"
              echo
              echo "No scan results generated."
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi
          table_rows="$(
            jq -r '
              [.runs[].results[]
               | (
                   (.properties.severity // (if .level == "error" then "HIGH" elif .level == "warning" then "MEDIUM" else "LOW" end))
                   | ascii_upcase
                 )
              ]
              | reduce .[] as $sev (
                  {"CRITICAL":0,"HIGH":0,"MEDIUM":0,"LOW":0,"UNKNOWN":0};
                  .[$sev] += 1
                )
              | to_entries
              | map(select(.value > 0))
              | sort_by(({"CRITICAL":0,"HIGH":1,"MEDIUM":2,"LOW":3,"UNKNOWN":4}[.key]) // 5)
              | map("| \(.key) | \(.value) |")
              | join("\n")
            ' trivy-results.sarif
          )"
          if [ -z "$table_rows" ]; then
            table_rows="No vulnerabilities found."
          else
            table_rows=$'| Severity | Count |\n| --- | --- |\n'"$table_rows"
          fi
          {
            echo "report<<EOF"
            echo "### Trivy Scan Summary"
            echo
            printf '%s\n' "$table_rows"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Comment scan summary
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: trivy-scan
          message: |
            ${{ steps.trivy_summary.outputs.report }}
